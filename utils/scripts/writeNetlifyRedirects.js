const fs = require('fs')
const path = require('path')
require('dotenv').config()

// Load environment variables from .env file
const mainUrl = process.env.URL

if (!mainUrl) {
  console.error(
    'No redirect rules were generated: The "URL" environment variable is missing.'
  )
  process.exit(1)
}

// Import the local configuration JSON file
const localConf = require('../../localeConf.json')

// Initialize the comment for auto-generated rules
const autoGeneratedComment =
  '# --- AUTO-GENERATED RULES FROM writeNetlifyRedirects.js ---'

// Helper function to add redirect rules
const addRedirectRule = (from, to) => {
  return `${from} ${to} 200!\n`
}

// Generate redirect rules
let generatedRules = `${autoGeneratedComment}\n\n`

Object.keys(localConf).forEach((namespace) => {
  const config = localConf[namespace]

  // Add redirect rules for each domain
  if (config.domains && config.domains.length > 0) {
    config.domains.forEach((domain) => {
      generatedRules += addRedirectRule(
        `${domain}/_next/*`,
        `${mainUrl}/_next/:splat`
      )
      generatedRules += addRedirectRule(
        `${domain}/adds/*`,
        `${mainUrl}/adds/:splat`
      )
      generatedRules += addRedirectRule(
        `${domain}/api/*`,
        `${mainUrl}/api/:splat`
      )
      generatedRules += addRedirectRule(
        `${domain}`,
        `${mainUrl}/default/${namespace}`
      )
      generatedRules += addRedirectRule(
        `${domain}/*`,
        `${mainUrl}/default/${namespace}/:splat`
      )

      // Add redirect rules for each language
      if (config.langs && config.langs.length > 0) {
        config.langs.forEach((locale) => {
          generatedRules += addRedirectRule(
            `${domain}/${locale}`,
            `${mainUrl}/${locale}/${namespace}`
          )
          generatedRules += addRedirectRule(
            `${domain}/${locale}/*`,
            `${mainUrl}/${locale}/${namespace}/:splat`
          )
        })
      }
    })
  }
})

// Define the path to the _redirects file
const redirectsFilePath = path.join(__dirname, '../../.next/_redirects')

// Ensure the public directory exists
const publishDir = path.dirname(redirectsFilePath)
if (!fs.existsSync(publishDir)) {
  fs.mkdirSync(publishDir)
}

// Write the generated rules to the _redirects file
fs.writeFileSync(redirectsFilePath, generatedRules, 'utf8')

console.log('_redirects file has been updated with the redirect rules.')
